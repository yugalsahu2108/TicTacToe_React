{"ast":null,"code":"var _jsxFileName = \"/Users/yugalsahu/Desktop/React_Scratch/TicTacToe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./components/Player\";\nimport GameBoard from \"./components/GameBoard.jsx\";\nimport Log from \"./components/Log.jsx\";\nimport { WINNING_COMBINATIONS } from \"./components/WinningCombination\";\nimport GameOver from \"./components/GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initBoard = [[null, null, null], [null, null, null], [null, null, null]];\nfunction deriveActivePlayer(gameTurn) {\n  let currentPlayer = \"X\";\n  if (gameTurn.length > 0 && gameTurn[0].player === \"X\") {\n    currentPlayer = \"O\";\n  }\n  return currentPlayer;\n}\nfunction App() {\n  _s();\n  const [players, setPlayers] = useState({\n    X: \"Player 1\",\n    O: \"Player 2\"\n  });\n  const [gameTurn, setGameTurn] = useState([]);\n  // const [activePlayer, setActivePlayer] = useState(\"X\");\n\n  const activePlayer = deriveActivePlayer(gameTurn);\n  let gameBoard = [...initBoard.map(array => [...array])];\n  for (const turn of gameTurn) {\n    const {\n      square,\n      player\n    } = turn;\n    const {\n      row,\n      col\n    } = square;\n    gameBoard[row][col] = player;\n  }\n  let winner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstSquareSymbol = gameBoard[combination[0].row][combination[0].column];\n    const secondSquareSymbol = gameBoard[combination[1].row][combination[1].column];\n    const thirdSquareSymbol = gameBoard[combination[2].row][combination[2].column];\n    if (firstSquareSymbol && firstSquareSymbol === secondSquareSymbol && firstSquareSymbol === thirdSquareSymbol) {\n      winner = players[firstSquareSymbol];\n    }\n  }\n  const hasDraw = gameTurn.length === 9 && !winner;\n  function handleSelectSquare(rowIndex, colIndex) {\n    //setActivePlayer((curActivePlayer) => (curActivePlayer === \"X\" ? \"O\" : \"X\"));\n    setGameTurn(prevTurns => {\n      const currentPlayer = deriveActivePlayer(prevTurns);\n      const updateTurns = [{\n        square: {\n          row: rowIndex,\n          col: colIndex\n        },\n        player: currentPlayer\n      }, ...prevTurns];\n      return updateTurns;\n    });\n  }\n  function handleRestart() {\n    setGameTurn([]);\n  }\n  function handlePlayerNameChange(symbol, newName) {\n    setPlayers(prevPlayer => {\n      return {\n        ...prevPlayer,\n        [symbol]: newName\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        id: \"players\",\n        className: \"highlight-player\",\n        children: [/*#__PURE__*/_jsxDEV(Player, {\n          player: \"Player 1\",\n          playerSymbol: \"X\",\n          isActive: activePlayer === \"X\",\n          onPlayerChange: handlePlayerNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Player, {\n          player: \"Player 2\",\n          playerSymbol: \"O\",\n          isActive: activePlayer === \"O\",\n          onPlayerChange: handlePlayerNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), (winner || hasDraw) && /*#__PURE__*/_jsxDEV(GameOver, {\n        winner: winner,\n        onRestart: handleRestart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        onSelectSquare: handleSelectSquare,\n        board: gameBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Log, {\n      turn: gameTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EOu6G3J6qwkG+sW7uz+/YVUlhkQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Player","GameBoard","Log","WINNING_COMBINATIONS","GameOver","jsxDEV","_jsxDEV","initBoard","deriveActivePlayer","gameTurn","currentPlayer","length","player","App","_s","players","setPlayers","X","O","setGameTurn","activePlayer","gameBoard","map","array","turn","square","row","col","winner","combination","firstSquareSymbol","column","secondSquareSymbol","thirdSquareSymbol","hasDraw","handleSelectSquare","rowIndex","colIndex","prevTurns","updateTurns","handleRestart","handlePlayerNameChange","symbol","newName","prevPlayer","children","id","className","playerSymbol","isActive","onPlayerChange","fileName","_jsxFileName","lineNumber","columnNumber","onRestart","onSelectSquare","board","_c","$RefreshReg$"],"sources":["/Users/yugalsahu/Desktop/React_Scratch/TicTacToe/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Player from \"./components/Player\";\nimport GameBoard from \"./components/GameBoard.jsx\";\nimport Log from \"./components/Log.jsx\";\nimport { WINNING_COMBINATIONS } from \"./components/WinningCombination\";\nimport GameOver from \"./components/GameOver\";\n\nconst initBoard = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null],\n];\n\nfunction deriveActivePlayer(gameTurn) {\n  let currentPlayer = \"X\";\n\n  if (gameTurn.length > 0 && gameTurn[0].player === \"X\") {\n    currentPlayer = \"O\";\n  }\n  return currentPlayer;\n}\n\nfunction App() {\n  const [players, setPlayers] = useState({\n    X: \"Player 1\",\n    O: \"Player 2\",\n  });\n  const [gameTurn, setGameTurn] = useState([]);\n  // const [activePlayer, setActivePlayer] = useState(\"X\");\n\n  const activePlayer = deriveActivePlayer(gameTurn);\n\n  let gameBoard = [...initBoard.map((array) => [...array])];\n  for (const turn of gameTurn) {\n    const { square, player } = turn;\n    const { row, col } = square;\n    gameBoard[row][col] = player;\n  }\n  let winner;\n  for (const combination of WINNING_COMBINATIONS) {\n    const firstSquareSymbol =\n      gameBoard[combination[0].row][combination[0].column];\n    const secondSquareSymbol =\n      gameBoard[combination[1].row][combination[1].column];\n    const thirdSquareSymbol =\n      gameBoard[combination[2].row][combination[2].column];\n\n    if (\n      firstSquareSymbol &&\n      firstSquareSymbol === secondSquareSymbol &&\n      firstSquareSymbol === thirdSquareSymbol\n    ) {\n      winner = players[firstSquareSymbol];\n    }\n  }\n\n  const hasDraw = gameTurn.length === 9 && !winner;\n\n  function handleSelectSquare(rowIndex, colIndex) {\n    //setActivePlayer((curActivePlayer) => (curActivePlayer === \"X\" ? \"O\" : \"X\"));\n    setGameTurn((prevTurns) => {\n      const currentPlayer = deriveActivePlayer(prevTurns);\n      const updateTurns = [\n        {\n          square: { row: rowIndex, col: colIndex },\n          player: currentPlayer,\n        },\n        ...prevTurns,\n      ];\n\n      return updateTurns;\n    });\n  }\n\n  function handleRestart() {\n    setGameTurn([]);\n  }\n\n  function handlePlayerNameChange(symbol, newName) {\n    setPlayers((prevPlayer) => {\n      return {\n        ...prevPlayer,\n        [symbol]: newName,\n      };\n    });\n  }\n\n  return (\n    <main>\n      <div id=\"game-container\">\n        <ol id=\"players\" className=\"highlight-player\">\n          <Player\n            player=\"Player 1\"\n            playerSymbol=\"X\"\n            isActive={activePlayer === \"X\"}\n            onPlayerChange={handlePlayerNameChange}\n          />\n          <Player\n            player=\"Player 2\"\n            playerSymbol=\"O\"\n            isActive={activePlayer === \"O\"}\n            onPlayerChange={handlePlayerNameChange}\n          />\n        </ol>\n        {(winner || hasDraw) && (\n          <GameOver winner={winner} onRestart={handleRestart} />\n        )}\n        <GameBoard onSelectSquare={handleSelectSquare} board={gameBoard} />\n      </div>\n      <Log turn={gameTurn} />\n    </main>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}